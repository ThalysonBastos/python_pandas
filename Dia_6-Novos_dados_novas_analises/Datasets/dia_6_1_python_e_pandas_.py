# -*- coding: utf-8 -*-
"""Dia 6.1 Python e Pandas .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mri6qLeJXy4InDVP_1UKd6arZfmKr6gh
"""

import pandas as pd

dados_2010_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20101.csv?raw=true')
dados_2010_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20102.csv?raw=true')
dados_2011_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20111.csv?raw=true')
dados_2011_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20112.csv?raw=true')
dados_2012_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20121.csv?raw=true')
dados_2012_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20122.csv?raw=true')
dados_2013_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20131.csv?raw=true')
dados_2013_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20132.csv?raw=true')
dados_2014_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20141.csv?raw=true')
dados_2014_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20142.csv?raw=true')
dados_2015_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20151.csv?raw=true')
dados_2015_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20152.csv?raw=true')
dados_2016_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20161.csv?raw=true')
dados_2016_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20162.csv?raw=true')
dados_2017_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20171.csv?raw=true')
dados_2017_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20172.csv?raw=true')
dados_2018_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20181.csv?raw=true')
dados_2018_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20182.csv?raw=true')
dados_2019_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20191.csv?raw=true')
dados_2019_2 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20192.csv?raw=true')
dados_2020_1 = pd.read_csv('https://github.com/ThalysonBastos/python_pandas/blob/main/Dia_1-Importando_dados/Datasets/dados_emprestimos/emprestimos-20201.csv?raw=true')

emprestimos_biblioteca = pd.concat([dados_2010_1, dados_2010_2, dados_2011_1, dados_2011_2, dados_2013_1, dados_2013_2, dados_2014_1, dados_2014_2, dados_2015_1, dados_2015_2, dados_2016_1, dados_2016_2,
                                    dados_2017_1, dados_2017_2, dados_2018_1, dados_2018_2, dados_2019_1, dados_2019_2, dados_2020_1], ignore_index=True)

emprestimos_biblioteca

emprestimos_biblioteca.value_counts()

#Excluindo duplicatas
emprestimos_biblioteca = emprestimos_biblioteca.drop_duplicates()

emprestimos_biblioteca.value_counts()

emprestimos_biblioteca.head()

#importando mais dados
dados_exemplares = pd.read_parquet('https://github.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/raw/main/Dia_1-Importando_dados/Datasets/dados_exemplares.parquet')

dados_exemplares

#Unindo os dataFrames
emprestimos_completo = emprestimos_biblioteca.merge(dados_exemplares)
emprestimos_completo

emprestimos_completo.head()

#atribuindo coluna com nomeclatura da CDU

CDU_lista = []
for CDU in emprestimos_completo['localizacao']:
  if(CDU < 100):
    CDU_lista.append('Generalidades')
  elif(CDU < 200):
    CDU_lista.append('Filosifia e psicologia')
  elif(CDU < 300):
    CDU_lista.append('Religião')
  elif(CDU < 400):
    CDU_lista.append('Ciências Sociais')
  elif(CDU < 500):
    CDU_lista.append('Classe Vaga')
  elif(CDU < 600):
    CDU_lista.append('Matemática e Ciências Naturais')
  elif(CDU < 700):
    CDU_lista.append('Ciências Aplicadas')
  elif(CDU < 800):
    CDU_lista.append('Belas Artes')
  elif(CDU < 900):
    CDU_lista.append('Linguagem')
  else:
    CDU_lista.append('Geografia. Biologia. História')

emprestimos_completo['CDU_geral'] = CDU_lista

emprestimos_completo.head()

#Excluindo uma coluna no sistema "registro_sistema"
emprestimos_completo.drop(columns=['registro_sistema'], inplace=True)

emprestimos_completo.head()

#Modificando tipo de dado da matrícula para string
emprestimos_completo['matricula_ou_siape'] = emprestimos_completo['matricula_ou_siape'].astype('string')

import seaborn as sns
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt

emprestimos_completo.head()

#Explorando o DateTime
#Note que o "id_emprestimo" é cada empréstimo realizado que pode ter 1 ou mais exemplares.
#Portando cada linha é o empréstimo de cada exemplar.

emprestimos_completo.loc[emprestimos_completo['id_emprestimo']==1775991]

emprestimos_completo['id_emprestimo'].value_counts()

#Quantos emprestimos foram realizados no total

emprestimos_total = len(emprestimos_completo['id_emprestimo'].drop_duplicates())
emprestimos_total

print('O número de empréstimos total foi de: ' + str(emprestimos_total))

#Quantos exemplares foram no total

exemplares_total = len(emprestimos_completo['id_exemplar'].drop_duplicates())
exemplares_total

print('O número de exemplares total foi de: ' + str(exemplares_total))

#quantidade de exemplares emprestados por ano

emprestimos_data = pd.DataFrame(emprestimos_completo['data_emprestimo'].value_counts()).reset_index()
emprestimos_data.columns = ['data', 'quantidade']
emprestimos_data['data'] = pd.to_datetime(emprestimos_data['data'])
emprestimos_data

emprestimos_por_ano = emprestimos_data.groupby(emprestimos_data['data'].dt.year)['quantidade'].sum()
emprestimos_por_ano.index.name = 'ano'
emprestimos_por_ano

#configurando o tema dos gráficos

sns.set_theme(context='notebook',
              style='darkgrid',
              palette='deep',
              font_scale=1.3,
              rc={"figure.figsize":(15,8)})

ax = sns.lineplot(data=emprestimos_por_ano.reset_index(), x='ano', y='quantidade')# Convert the Series to a DataFrame using reset_index()
ax.set(xlabel=None, ylabel=None)
ax.tick_params(axis='x', rotation=45)
ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',').replace(',','.')))

ax.set_title('Quantidade de empréstimos por ano' + '\n', size=20, loc='left', weight='bold')
ax.set_ylabel('Quantidade de empréstimos', size=15)

ax=ax

emprestimos_data.data

#emprestimos por hora
emprestimos_por_hora = emprestimos_data.groupby(emprestimos_data['data'].dt.hour)['quantidade'].sum()
emprestimos_por_hora.index.name = 'hora'
emprestimos_por_hora

emprestimos_por_hora = emprestimos_por_hora.sort_values(ascending=True)

emprestimos_por_hora_df = emprestimos_por_hora.reset_index()
emprestimos_por_hora_df.columns = ['horas', 'quantidade']
emprestimos_por_hora_df

ax = sns.barplot(data=emprestimos_por_hora_df, y='quantidade', x='horas',
                 palette='Greens', hue='quantidade', dodge=False)
plt.legend([],[], frameon=False)

ax.set(xlabel='Horário', ylabel=None)
ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',').replace(',','.')))

ax.set_title('Quantidade de empréstimos por hora' + '\n', size=20, loc='left', weight='bold')

ax=ax

#modificando tipo de dados da data de empréstimos do DataFrame
emprestimos_completo['data_emprestimo'] = pd.to_datetime(emprestimos_completo['data_emprestimo'])

#verificando os valores únicos das variáveis
emprestimos_completo.tipo_vinculo_usuario.unique()

#verificando coleção
emprestimos_completo.colecao.unique()

#verificando biblioteca
emprestimos_completo.biblioteca.unique()

#verificando as CDU Geral
emprestimos_completo.CDU_geral.unique()

#Esta função irá gerar uma tabela de frequencia com percentuais de acordo com a variável passada

#variável = variável categórica escolhida de dentro do conjunto de dados emprestimos completo

def tabela_frequencia(variavel):
  dataframe = pd.DataFrame(emprestimos_completo[variavel].value_counts())
  dataframe.columns = ['quantidade']
  dataframe['percentual'] = round((dataframe.quantidade / dataframe.quantidade.sum())*100,1)

  return dataframe

tabela_frequencia('tipo_vinculo_usuario')

tabela_frequencia('colecao')

tabela_frequencia('biblioteca')

"""**Dia 5 - Analisando empréstimos com boxplot**


"""

emprestimos_completo.head()

alunos_graduacao = emprestimos_completo.query('tipo_vinculo_usuario == "ALUNO DE GRADUAÇÃO"')

alunos_graduacao.colecao.value_counts()

#Criando tabela com a quantidade mensal por ano
#pegando dados apenas da coleção == acervo circulante da tabela de alunos_graduacao

alunos_graduacao_acervo_circulante = alunos_graduacao.query('colecao == "Acervo Circulante"')
alunos_graduacao_acervo_circulante = pd.DataFrame(alunos_graduacao_acervo_circulante)
alunos_graduacao_acervo_circulante['data_emprestimo'] = pd.to_datetime(alunos_graduacao_acervo_circulante['data_emprestimo'])
alunos_graduacao_acervo_circulante['ano'] = alunos_graduacao_acervo_circulante['data_emprestimo'].dt.year
alunos_graduacao_acervo_circulante['mes'] = alunos_graduacao_acervo_circulante['data_emprestimo'].dt.month
alunos_graduacao_acervo_circulante = alunos_graduacao_acervo_circulante.loc[:,['ano', 'mes']]
alunos_graduacao_acervo_circulante = alunos_graduacao_acervo_circulante.value_counts().to_frame('quantidade').reset_index()
alunos_graduacao_acervo_circulante

alunos_graduacao.head()

#Função gera_box_plot

#Esta função irá gerar um gráfico de boxplot

def gera_box_plot(dataset, x, y, titulo, subtitulo):
  sns.set_theme(style='darkgrid', palette='Blues', font_scale=1.3)
  plt.figure(figsize=(16,10))

  ax = sns.boxplot(y=y, x=x, data=dataset, color='#4171ef')
  ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',').replace(',','.')))

  plt.ylim(0, max(dataset[y])*1.1)
  plt.xlabel(None)
  plt.ylabel(None)

  ax.set_title(titulo + '\n' , size=20, loc='left', weight='bold')
  ax.text(s=subtitulo, x=0.5, y=max(dataset[y])*1.11, fontsize=16, ha='left', color='gray')

gera_box_plot(alunos_graduacao_acervo_circulante, 'ano', 'quantidade', 'Quantidade de empréstimos Mensais', 'Alunos acervo circulante')

alunos_pos_graduacao = emprestimos_completo.query('tipo_vinculo_usuario == "ALUNO DE PÓS-GRADUAÇÃO"')
alunos_pos_graduacao.colecao.value_counts()

#Criando tabela com a quantidade mensal por ano

alunos_pos_graduacao_acervo_circulante = alunos_pos_graduacao.query('colecao == "Acervo Circulante"')
alunos_pos_graduacao_acervo_circulante = pd.DataFrame(alunos_pos_graduacao_acervo_circulante)
alunos_pos_graduacao_acervo_circulante['data_emprestimo'] = pd.to_datetime(alunos_pos_graduacao_acervo_circulante['data_emprestimo'])
alunos_pos_graduacao_acervo_circulante['ano'] = pd.to_datetime(alunos_pos_graduacao_acervo_circulante['data_emprestimo']).dt.year
alunos_pos_graduacao_acervo_circulante['mes'] = pd.to_datetime(alunos_pos_graduacao_acervo_circulante['data_emprestimo']).dt.month
alunos_pos_graduacao_acervo_circulante = alunos_pos_graduacao_acervo_circulante.loc[:,['ano', 'mes']]
alunos_pos_graduacao_acervo_circulante = alunos_pos_graduacao_acervo_circulante.value_counts().to_frame('quantidade').reset_index()
alunos_pos_graduacao_acervo_circulante

#Distribuição dos empréstimos mensais realizados pelos alunos de pós graduação na coleção acervo circulante

gera_box_plot(alunos_pos_graduacao_acervo_circulante, 'ano', 'quantidade', 'Quantidade de emprestimos mensais ', 'Alunos de pós graduação ')

"""Dia 6 - Novos Dados e novas análise"""

url_antes_2010 = 'https://raw.githubusercontent.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/main/Dia_6-Novos_dados_novas_analises/Datasets/matricula_alunos.xlsx'
url_depois_2010 = 'https://raw.githubusercontent.com/FranciscoFoz/7_Days_of_Code_Alura-Python-Pandas/main/Dia_6-Novos_dados_novas_analises/Datasets/matricula_alunos.xlsx'

cadastro_usuarios_antes_2010 = pd.read_excel(url_antes_2010, sheet_name='Até 2010', skiprows=1, engine='openpyxl')
cadastro_usuarios_depois_2010 = pd.read_excel(url_depois_2010, sheet_name='Após 2010', skiprows=1, engine='openpyxl')

cadastro_usuarios_antes_2010.head()

cadastro_usuarios_depois_2010.head()

cadastro_usuarios_antes_2010.columns = ['matricula_ou_siape', 'tipo_vinculo_usuario', 'curso']

cadastro_usuarios_antes_2010

cadastro_usuarios_depois_2010.columns = ['matricula_ou_siape', 'tipo_vinculo_usuario', 'curso']

cadastro_usuarios_depois_2010

#concatenando as duas tabelas
cadastro_usuarios_excel = pd.concat([cadastro_usuarios_antes_2010, cadastro_usuarios_depois_2010], ignore_index=True)
cadastro_usuarios_excel.matricula_ou_siape = cadastro_usuarios_excel.matricula_ou_siape.astype('string')
cadastro_usuarios_excel

"""Arquivo JSON"""

raw_json_url = 'https://raw.githubusercontent.com/ThalysonBastos/python_pandas/main/Dia_6-Novos_dados_novas_analises/Datasets/cadastro_alunos.json'

cadastro_usuarios_json = pd.read_json(raw_json_url)
cadastro_usuarios_json

cadastro_usuarios_graduacao_json = pd.read_json(cadastro_usuarios_json.registros[0])
cadastro_usuarios_graduacao_json

cadastro_usuarios_graduacao_json.info()

#modificando o tipo de dado da matricula
cadastro_usuarios_graduacao_json.matricula_ou_siape = cadastro_usuarios_graduacao_json.matricula_ou_siape.astype('float')
cadastro_usuarios_graduacao_json.matricula_ou_siape = cadastro_usuarios_graduacao_json.matricula_ou_siape.astype('string')

cadastro_usuarios_graduacao_json.info()

#Concatenando arquivos excel e Json

cadastro_usuarios_cursos = pd.concat([cadastro_usuarios_excel, cadastro_usuarios_graduacao_json],ignore_index=True)
cadastro_usuarios_cursos

#Emprestimos de alunos de graduação de 2015 em diante

matricula_data_emprestimo = emprestimos_completo.query('tipo_vinculo_usuario == "ALUNO DE GRADUAÇÃO"')
matricula_data_emprestimo = matricula_data_emprestimo.loc[:, ['matricula_ou_siape','data_emprestimo']]
matricula_data_emprestimo = matricula_data_emprestimo.query('data_emprestimo >= 2015')
matricula_data_emprestimo = matricula_data_emprestimo.reset_index(drop=True)
matricula_data_emprestimo

